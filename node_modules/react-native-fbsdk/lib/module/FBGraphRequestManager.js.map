{"version":3,"sources":["FBGraphRequestManager.js"],"names":["NativeGraphRequestManager","require","NativeModules","FBGraphRequest","_verifyParameters","request","config","parameters","key","param","string","Error","FBGraphRequestManager","requestBatch","requestCallbacks","push","callback","batchCallback","timeout","that","error","result","response","forEach","innerCallback","index","array","start","module","exports"],"mappings":"AAuBA,a,uWAEA,GAAMA,CAAAA,yBAAyB,CAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,aAAxB,CAC/BC,cADH,CAOA,QAASC,CAAAA,iBAAT,CAA2BC,OAA3B,CAAkD,CAChD,GAAIA,OAAO,CAACC,MAAR,EAAkBD,OAAO,CAACC,MAAR,CAAeC,UAArC,CAAiD,CAC/C,IAAK,GAAIC,CAAAA,GAAT,GAAgBH,CAAAA,OAAO,CAACC,MAAR,CAAeC,UAA/B,CAA2C,CACzC,GAAIE,CAAAA,KAAK,CAAGJ,OAAO,CAACC,MAAR,CAAeC,UAAf,CAA0BC,GAA1B,CAAZ,CACA,GAAI,MAAOC,CAAAA,KAAP,GAAiB,QAAjB,EAA6BA,KAAK,CAACC,MAAvC,CAA+C,CAC7C,SACD,CACD,KAAM,IAAIC,CAAAA,KAAJ,CACJ,mCACEH,GADF,CAEE,wBAFF,CAGE,2CAJE,CAAN,CAMD,CACF,CACF,C,GAEKI,CAAAA,qB,YAKJ,gCAAc,0OACZ,KAAKC,YAAL,CAAoB,EAApB,CACA,KAAKC,gBAAL,CAAwB,EAAxB,CACD,C,6FAKUT,O,CAA8C,CACvDD,iBAAiB,CAACC,OAAD,CAAjB,CACA,KAAKQ,YAAL,CAAkBE,IAAlB,CAAuBV,OAAvB,EACA,KAAKS,gBAAL,CAAsBC,IAAtB,CAA2BV,OAAO,CAACW,QAAnC,EACA,MAAO,KAAP,CACD,C,0DAQCA,Q,CACuB,CACvB,KAAKC,aAAL,CAAqBD,QAArB,CACA,MAAO,KAAP,CACD,C,oCAYKE,O,CAAkB,CACtB,GAAMC,CAAAA,IAAI,CAAG,IAAb,CACA,GAAMH,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACI,KAAD,CAAQC,MAAR,CAAgBC,QAAhB,CAA6B,CAC5C,GAAIA,QAAJ,CAAc,CACZH,IAAI,CAACL,gBAAL,CAAsBS,OAAtB,CAA8B,SAACC,aAAD,CAAgBC,KAAhB,CAAuBC,KAAvB,CAAiC,CAC7D,GAAIF,aAAJ,CAAmB,CACjBA,aAAa,CAACF,QAAQ,CAACG,KAAD,CAAR,CAAgB,CAAhB,CAAD,CAAqBH,QAAQ,CAACG,KAAD,CAAR,CAAgB,CAAhB,CAArB,CAAb,CACD,CACF,CAJD,EAKD,CACD,GAAIN,IAAI,CAACF,aAAT,CAAwB,CACtBE,IAAI,CAACF,aAAL,CAAmBG,KAAnB,CAA0BC,MAA1B,EACD,CACF,CAXD,CAaArB,yBAAyB,CAAC2B,KAA1B,CAAgC,KAAKd,YAArC,CAAmDK,OAAO,EAAI,CAA9D,CAAiEF,QAAjE,EACD,C,qCAGHY,MAAM,CAACC,OAAP,CAAiBjB,qBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst NativeGraphRequestManager = require('react-native').NativeModules\n  .FBGraphRequest;\n\nimport type GraphRequest from './FBGraphRequest';\n\ntype Callback = (error: ?Object, result: ?Object) => void;\n\nfunction _verifyParameters(request: GraphRequest) {\n  if (request.config && request.config.parameters) {\n    for (var key in request.config.parameters) {\n      var param = request.config.parameters[key];\n      if (typeof param === 'object' && param.string) {\n        continue;\n      }\n      throw new Error(\n        \"Unexpected value for parameter '\" +\n          key +\n          \"'. Request parameters \" +\n          \"need to be objects with a 'string' field.\",\n      );\n    }\n  }\n}\n\nclass FBGraphRequestManager {\n  requestBatch: Array<GraphRequest>;\n  requestCallbacks: Array<?Callback>;\n  batchCallback: Callback;\n\n  constructor() {\n    this.requestBatch = [];\n    this.requestCallbacks = [];\n  }\n\n  /**\n   * Add a graph request.\n   */\n  addRequest(request: GraphRequest): FBGraphRequestManager {\n    _verifyParameters(request);\n    this.requestBatch.push(request);\n    this.requestCallbacks.push(request.callback);\n    return this;\n  }\n\n  /**\n   * Add call back to the GraphRequestManager. Only one callback can be added.\n   * Note that invocation of the batch callback does not indicate success of every\n   * graph request made, only that the entire batch has finished executing.\n   */\n  addBatchCallback(\n    callback: (error: ?Object, result: ?Object) => void,\n  ): FBGraphRequestManager {\n    this.batchCallback = callback;\n    return this;\n  }\n\n  /**\n   * Executes requests in a batch.\n   * Note that when there's an issue with network connection the batch callback\n   * behavior differs in Android and iOS.\n   * On iOS, the batch callback returns an error if the batch fails with a network error.\n   * On Android, the batch callback always returns {\"result\": \"batch finished executing\"}\n   * after the batch time out. This is because detecting network status requires\n   * extra permission and it's unncessary for the sdk. Instead, you can use the NetInfo module\n   * in react-native to get the network status.\n   */\n  start(timeout: ?number) {\n    const that = this;\n    const callback = (error, result, response) => {\n      if (response) {\n        that.requestCallbacks.forEach((innerCallback, index, array) => {\n          if (innerCallback) {\n            innerCallback(response[index][0], response[index][1]);\n          }\n        });\n      }\n      if (that.batchCallback) {\n        that.batchCallback(error, result);\n      }\n    };\n\n    NativeGraphRequestManager.start(this.requestBatch, timeout || 0, callback);\n  }\n}\n\nmodule.exports = FBGraphRequestManager;\n"]}