{"version":3,"sources":["FBAppEventsLogger.js"],"names":["AppEventsLogger","require","NativeModules","FBAppEventsLogger","module","exports","setFlushBehavior","flushBehavior","logEvent","eventName","valueToSum","args","shift","parameters","logPurchase","purchaseAmount","currencyCode","logPushNotificationOpen","payload","flush","setUserID","userID","getUserID","updateUserProperties","setUserData","userData","setPushNotificationsDeviceToken","deviceToken","setPushNotificationsRegistrationId","registrationId"],"mappings":"AAsBA,a,kKAEA,GAAMA,CAAAA,eAAe,CAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,aAAxB,CAAsCC,iBAA9D,CAkCAC,MAAM,CAACC,OAAP,CAAiB,CAKfC,gBALe,2BAKEC,aALF,CAKyC,CACtDP,eAAe,CAACM,gBAAhB,CAAiCC,aAAjC,EACD,CAPc,CAkBfC,QAlBe,mBAkBNC,SAlBM,CAkB8C,CAC3D,GAAIC,CAAAA,UAAU,CAAG,CAAjB,CAD2D,8BAA9BC,IAA8B,qDAA9BA,IAA8B,0BAE3D,GAAI,MAAOA,CAAAA,IAAI,CAAC,CAAD,CAAX,GAAmB,QAAvB,CAAiC,CAC/BD,UAAU,CAAGC,IAAI,CAACC,KAAL,EAAb,CACD,CACD,GAAIC,CAAAA,UAAU,CAAG,IAAjB,CACA,GAAI,MAAOF,CAAAA,IAAI,CAAC,CAAD,CAAX,GAAmB,QAAvB,CAAiC,CAC/BE,UAAU,CAAGF,IAAI,CAAC,CAAD,CAAjB,CACD,CACDX,eAAe,CAACQ,QAAhB,CAAyBC,SAAzB,CAAoCC,UAApC,CAAgDG,UAAhD,EACD,CA5Bc,CAiCfC,WAjCe,sBAkCbC,cAlCa,CAmCbC,YAnCa,CAoCbH,UApCa,CAqCb,CACAb,eAAe,CAACc,WAAhB,CAA4BC,cAA5B,CAA4CC,YAA5C,CAA0DH,UAA1D,EACD,CAvCc,CA4CfI,uBA5Ce,kCA4CSC,OA5CT,CA4C2B,CACxClB,eAAe,CAACiB,uBAAhB,CAAwCC,OAAxC,EACD,CA9Cc,CAmDfC,KAnDe,iBAmDP,CACNnB,eAAe,CAACmB,KAAhB,GACD,CArDc,CA2DfC,SA3De,oBA2DLC,MA3DK,CA2DkB,CAC/BrB,eAAe,CAACoB,SAAhB,CAA0BC,MAA1B,EACD,CA7Dc,CAkETC,SAlES,4LAmEAtB,eAAe,CAACsB,SAAhB,EAnEA,uGA0EfC,oBA1Ee,+BA0EMV,UA1EN,CA0E0B,CACvCb,eAAe,CAACuB,oBAAhB,CAAqCV,UAArC,EACD,CA5Ec,CAiFfW,WAjFe,sBAiFHC,QAjFG,CAiFiB,CAC9BzB,eAAe,CAACwB,WAAhB,CAA4BC,QAA5B,EACD,CAnFc,CAyFfC,+BAzFe,0CAyFiBC,WAzFjB,CAyFsC,CACnD3B,eAAe,CAAC0B,+BAAhB,CAAgDC,WAAhD,EACD,CA3Fc,CAiGfC,kCAjGe,6CAiGoBC,cAjGpB,CAiG4C,CACzD7B,eAAe,CAAC4B,kCAAhB,CAAmDC,cAAnD,EACD,CAnGc,CAAjB","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\n/**\n * Controls when an AppEventsLogger sends log events to the server\n */\ntype AppEventsFlushBehavior =\n  /**\n   * Flush automatically: periodically (every 15 seconds or after every 100 events), and\n   * always at app reactivation. This is the default value.\n   */\n  | 'auto'\n  /**\n   * Only flush when AppEventsLogger.flush() is explicitly invoked.\n   */\n  | 'explicit_only';\ntype Params = {[key: string]: string | number};\n\n/**\n * Info about a user to increase chances of matching a Facebook user.\n * See https://developers.facebook.com/docs/app-events/advanced-matching for\n * more info about the expected format of each field.\n */\ntype UserData = $ReadOnly<{|\n  email?: ?string,\n  firstName?: ?string,\n  lastName?: ?string,\n  phone?: ?string,\n  dateOfBirth?: ?string,\n  gender?: ?('m' | 'f'),\n  city?: ?string,\n  state?: ?string,\n  zip?: ?string,\n  country?: ?string,\n|}>;\n\nmodule.exports = {\n  /**\n   * Sets the current event flushing behavior specifying when events\n   * are sent back to Facebook servers.\n   */\n  setFlushBehavior(flushBehavior: AppEventsFlushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n\n  /**\n   * Logs an event with eventName and optional arguments.\n   * This function supports the following usage:\n   * logEvent(eventName: string);\n   * logEvent(eventName: string, valueToSum: number);\n   * logEvent(eventName: string, parameters: {[key:string]:string|number});\n   * logEvent(eventName: string, valueToSum: number, parameters: {[key:string]:string|number});\n   * See https://developers.facebook.com/docs/app-events/android for detail.\n   */\n  logEvent(eventName: string, ...args: Array<number | Params>) {\n    let valueToSum = 0;\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n    let parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n\n  /**\n   * Logs a purchase. See http://en.wikipedia.org/wiki/ISO_4217 for currencyCode.\n   */\n  logPurchase(\n    purchaseAmount: number,\n    currencyCode: string,\n    parameters?: ?Params,\n  ) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n\n  /**\n   * Logs an app event that tracks that the application was open via Push Notification.\n   */\n  logPushNotificationOpen(payload: ?Object) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n\n  /**\n   * Explicitly kicks off flushing of events to Facebook.\n   */\n  flush() {\n    AppEventsLogger.flush();\n  },\n\n  /**\n   * Sets a custom user ID to associate with all app events.\n   * The userID is persisted until it is cleared by passing nil.\n   */\n  setUserID(userID: string | null) {\n    AppEventsLogger.setUserID(userID);\n  },\n\n  /**\n   * Returns user id or null if not set\n   */\n  async getUserID(): Promise<?string> {\n    return await AppEventsLogger.getUserID();\n  },\n\n  /**\n   * Sends a request to update the properties for the current user, set by\n   * setUserID. You must call setUserID before making this call.\n   */\n  updateUserProperties(parameters: Params) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n\n  /**\n   * Set additional data about the user to increase chances of matching a Facebook user.\n   */\n  setUserData(userData: UserData) {\n    AppEventsLogger.setUserData(userData);\n  },\n\n  /**\n   * For iOS only, sets and sends device token to register the current application for push notifications.\n   * @platform ios\n   */\n  setPushNotificationsDeviceToken(deviceToken: string) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n\n  /**\n   * For Android only, sets and sends registration id to register the current app for push notifications.\n   * @platform Android\n   */\n  setPushNotificationsRegistrationId(registrationId: string) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n};\n"]}